package model.animals;

/**
 * Интерфейс-маркер для животных, способных питаться гусеницами.
 * Определяет контракт для получения вероятности успешного поедания гусениц.
 *
 * Назначение:
 * - Позволяет идентифицировать животных с особым типом питания
 * - Предоставляет единый способ получения вероятности поедания
 * - Участвует в механизме пищевой цепочки симуляции
 *
 * Особенности реализации:
 * 1. Реализуется только травоядными животными (Herbivore)
 * 2. Вероятность должна быть в диапазоне 0-100%
 * 3. Фактическая реализация механизма поедания находится в классе Herbivore
 */
public interface CaterpillarEater {

    /**
     * Возвращает вероятность успешного поедания гусеницы.
     * Вероятность учитывается при:
     * 1. Нахождении гусеницы на той же клетке
     * 2. Попытке питания (вызове метода eat)
     *
     * @return Вероятность в процентах (0-100), где:
     *         0 - никогда не ест гусениц
     *         100 - всегда успешно ест гусениц
     *
     * Логика использования:
     * 1. Herbivore проверяет implements CaterpillarEater
     * 2. Если да - вызывает getCaterpillarEatingChance()
     * 3. Использует Randomizer.getProbability() для проверки
     *
     * Значения вероятностей хранятся в SimulationSettings.EatingChance:
     * - DUCK_CATERPILLAR = 90
     * - MOUSE_CATERPILLAR = 90
     * - BOAR_CATERPILLAR = 90
     */
    int getCaterpillarEatingChance();
}

/**
 * Пример реализации в классе Duck:
 *
 * @Override
 * public int getCaterpillarEatingChance() {
 *     return SimulationSettings.EatingChance.DUCK_CATERPILLAR; // 90
 * }
 *
 * Схема работы в симуляции:
 * 1. Животное пытается есть (метод eat)
 * 2. Herbivore проверяет instanceof CaterpillarEater
 * 3. Если true - пытается съесть гусеницу с заданной вероятностью
 * 4. Если false/неудача - ест растения
 */